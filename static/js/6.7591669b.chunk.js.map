{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Edit/Edit.module.css","components/Edit/InputItem/InputItem.tsx","components/Edit/Edit.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","InputItem","name","label","customClassName","validate","className","style","inputBlock","Field","component","Input","type","Edit","show","onSubmit","formData","console","log","updateProfileData","showElement","elementName","setState","prevState","some","item","length","filter","this","profile","userId","getUserProfile","isUpdateSuccess","wrapper","EditReduxForm","initialValues","Preloader","reduxForm","form","handleSubmit","main","section","required","Textarea","checkboxBlock","contacts","Object","keys","map","key","slice","toUpperCase","editForm","active","disActive","onClick","btn","compose"],"mappings":"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","file":"static/js/6.7591669b.chunk.js","sourcesContent":["import React, {Component, FC} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nlet withAuthRedirect = (Component: React.ComponentType) => {\r\n    let RedirectComponent: FC<MapStatePropsType> = (props) => {\r\n        if (!props.isAuth) return <Redirect to='/login'/>;\r\n\r\n        return <Component {...props}/>\r\n    };\r\n\r\n    return connect<MapStatePropsType, unknown, unknown, AppStateType>(mapStateToProps)(RedirectComponent);\r\n};\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Edit_wrapper__1wq-e\",\"editForm\":\"Edit_editForm__2MxnM\",\"section\":\"Edit_section__5I4Zi\",\"inputBlock\":\"Edit_inputBlock__1bEZi\",\"checkboxBlock\":\"Edit_checkboxBlock__3EZvQ\",\"active\":\"Edit_active__2inJP\",\"disActive\":\"Edit_disActive__1M9GJ\",\"btn\":\"Edit_btn__gjWH_\"};","import React, {FC} from 'react';\r\nimport style from '../Edit.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    label: string\r\n    customClassName: string\r\n    validate?: Array<(values: string) => void>\r\n}\r\n\r\nconst InputItem: FC<PropsType> = ({name, label, customClassName, validate}) => {\r\n    return (\r\n        <div className={style.inputBlock}>\r\n            <label>{label}</label>\r\n            <Field name={name} validate={validate} customClassName={customClassName} component={Input} type='text'/>\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\nexport default InputItem;","import React, {Component, FC} from 'react';\r\nimport style from './Edit.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, updateProfileData} from \"../../Redux/profileReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {required} from \"../../utils/validators\";\r\nimport {compose} from \"redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport InputItem from \"./InputItem/InputItem\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {LoginFormData, ProfileType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../Redux/reduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    isUpdateSuccess: boolean\r\n    profile: ProfileType | null\r\n    userId: number | null\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateProfileData: (profileData: ProfileType) => void\r\n    getUserProfile: (userId: number) => void\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\ntype StateType = {\r\n    show: Array<string>\r\n}\r\n\r\nclass Edit extends Component<PropsType, StateType> {\r\n    state = {\r\n        show: ['main']\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.profile && this.props.userId) {\r\n            this.props.getUserProfile(this.props.userId);\r\n        }\r\n    }\r\n\r\n    onSubmit = (formData: ProfileType) => {\r\n        console.log(formData);\r\n        this.props.updateProfileData(formData);\r\n    };\r\n\r\n    showElement = (elementName: string) => {\r\n        this.setState((prevState) => {\r\n            if (prevState.show.some(item => item === elementName)) {\r\n                if (prevState.show.length > 1) {\r\n                    return {\r\n                        show: prevState.show.filter(item => item !== elementName)\r\n                    }\r\n                } else return prevState;\r\n\r\n            }\r\n            return {\r\n                show: [...prevState.show, elementName]\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        let {isUpdateSuccess, profile} = this.props;\r\n\r\n        if (isUpdateSuccess) {\r\n            return <Redirect to='/profile/about'/>\r\n        }\r\n        if (!profile) return <Preloader/>;\r\n        return (\r\n            <div className={style.wrapper}>\r\n                <EditReduxForm show={this.state.show} showElement={this.showElement} initialValues={profile}\r\n                               onSubmit={this.onSubmit}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype FormPropsType = {\r\n    show: Array<string>\r\n    initialValues: ProfileType\r\n    showElement: (elementName: string) => void\r\n}\r\n\r\nconst EditForm: FC<FormPropsType & InjectedFormProps<ProfileType, FormPropsType>> = ({handleSubmit, ...props}) => {\r\n\r\n    const main = (<div className={style.section}>\r\n        <InputItem name='fullName' label='Login' customClassName='right' validate={[required]}/>\r\n        <div className={style.inputBlock}>\r\n            <label>About me: </label>\r\n            <Field validate={[required]} name='aboutMe' customClassName={'right'} component={Textarea}/>\r\n        </div>\r\n        <div className={style.checkboxBlock}>\r\n            <label><Field name='lookingForAJob' component='input' type='checkbox'/>\r\n                Looking for a job</label>\r\n        </div>\r\n        <div className={style.inputBlock}>\r\n            <label>My professional skills: </label>\r\n            <Field validate={[required]} name='lookingForAJobDescription' customClassName={'right'}\r\n                   component={Textarea}/>\r\n        </div>\r\n    </div>);\r\n\r\n    const contacts = (<div className={style.section}>\r\n        {Object.keys(props.initialValues.contacts).map(item => {\r\n            return <InputItem key={item} name={`contacts.${item}`} label={item.slice(0, 1).toUpperCase() + item.slice(1)}\r\n                              customClassName='right'/>\r\n        })}\r\n    </div>);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={style.editForm}>\r\n            <h2 className={props.show.some(item => item === 'main') ? style.active : style.disActive}>\r\n                <span onClick={() => props.showElement('main')}>Main</span>\r\n            </h2>\r\n            {props.show.some(item => item === 'main') ? main : null}\r\n            <h2 className={props.show.some(item => item === 'contacts') ? style.active : style.disActive}>\r\n                <span onClick={() => props.showElement('contacts')}>Contacts</span>\r\n            </h2>\r\n            {props.show.some(item => item === 'contacts') ? contacts : null}\r\n            <div className={style.btn}>\r\n                <button>Save</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst EditReduxForm = reduxForm<ProfileType, FormPropsType>({form: 'edit'})(EditForm);\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isUpdateSuccess: state.profile.isUpdateSuccess,\r\n        profile: state.profile.profile,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nexport default compose(connect<MapStatePropsType, MapDispatchPropsType, unknown, AppStateType>(mapStateToProps,\r\n    {updateProfileData, getUserProfile}), withAuthRedirect)(Edit);"],"sourceRoot":""}