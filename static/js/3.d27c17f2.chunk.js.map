{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItems/Dialog/Dialog.module.css","components/Dialogs/DialogsItems/DialogsItems.module.css","components/Dialogs/Messages/MyMessages/MyMessages.module.css","components/Dialogs/Messages/Messages.module.css","components/Dialogs/Messages/YourMessages/YourMessages.module.css","components/Dialogs/Messages/Input/Input.module.css","utils/dateFormatter.ts","components/Dialogs/DialogsItems/Dialog/Dialog.tsx","components/Dialogs/DialogsItems/DialogsItems.tsx","components/Dialogs/Messages/MyMessages/MyMessages.tsx","components/Dialogs/Messages/YourMessages/YourMessages.tsx","components/Dialogs/Messages/Input/Input.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","to","module","exports","dateFormatter","date","dateStart","Date","setHours","getHours","difference","now","Math","ceil","Dialog","dialog","className","style","item","id","activeClassName","active","src","photos","small","defaultAvatar","alt","content","name","userName","lastDialogActivityDate","lastUserActivityDate","DialogsItems","dialogElemnts","dialogs","map","console","log","key","items","MyMessages","message","avatar","login","info","YourMessages","maxLength50","maxLength","MessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","customClassName","component","Textarea","validate","placeholder","Input","addMessage","userId","input","formData","messageText","Messages","messages","messageElements","length","Dialogs","Search","container","DialogsContainer","this","toggleIsSuccess","getDialogs","match","params","getMessages","isFetching","Preloader","React","compose","app","withRouter"],"mappings":"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","file":"static/js/3.d27c17f2.chunk.js","sourcesContent":["import React, {Component, FC} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/reduxStore\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nlet withAuthRedirect = (Component: React.ComponentType) => {\r\n    let RedirectComponent: FC<MapStatePropsType> = (props) => {\r\n        if (!props.isAuth) return <Redirect to='/login'/>;\r\n\r\n        return <Component {...props}/>\r\n    };\r\n\r\n    return connect<MapStatePropsType, unknown, unknown, AppStateType>(mapStateToProps)(RedirectComponent);\r\n};\r\n\r\nexport default withAuthRedirect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs___mZPs\",\"container\":\"Dialogs_container__2dAyz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialog_item__1vHkH\",\"dialog\":\"Dialog_dialog__3T4HM\",\"name\":\"Dialog_name__34HsH\",\"content\":\"Dialog_content__2xzGj\",\"active\":\"Dialog_active__cR9a9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"DialogsItems_items__2hJI2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"MyMessages_avatar__3ic4G\",\"message\":\"MyMessages_message__BM5Kx\",\"content\":\"MyMessages_content__1vG-D\",\"info\":\"MyMessages_info__2tEH0\",\"date\":\"MyMessages_date__29XyY\",\"name\":\"MyMessages_name__oA_u_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Messages_messages__2sP7m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"YourMessages_avatar__3XgZK\",\"message\":\"YourMessages_message__1ajLv\",\"content\":\"YourMessages_content__2F9H-\",\"info\":\"YourMessages_info__8Yz8t\",\"date\":\"YourMessages_date__3P8Xr\",\"name\":\"YourMessages_name__1FWbm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__ZhXE-\"};","export const dateFormatter = (date: string) => {\r\n    let dateStart = new Date(date);\r\n    dateStart.setHours(dateStart.getHours() + 2);\r\n    let dateNow = Date.now();\r\n    let difference = (dateNow - +dateStart) / 3600000;\r\n\r\n    if (difference <= 0.01) {\r\n        return 'a min ago';\r\n    } else if (difference <= 0.1) {\r\n        return 'a 5 min ago';\r\n    } else if (difference <= 1.3) {\r\n        return 'an hour ago'\r\n    } else if (difference <= 24) {\r\n        return `${Math.ceil(difference)} hour ago`;\r\n    } else if (difference < 48) {\r\n        return 'yesterday';\r\n    } else if (Math.ceil(difference) / 24 < 31) {\r\n        return `${Math.ceil(difference/24)} days ago`;\r\n    } else {\r\n        return 'a long time ago';\r\n    }\r\n};","import React, {FC} from 'react';\r\nimport style from './Dialog.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport defaultAvatar from '../../../../assets/images/user.png';\r\nimport {dateFormatter} from \"../../../../utils/dateFormatter\";\r\n\r\ntype PropsType = {\r\n    dialog: any\r\n}\r\n\r\nconst Dialog: FC<PropsType> = ({dialog}) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <NavLink to={'/messages/' + dialog.id} activeClassName={style.active}>\r\n                <div className={style.dialog}>\r\n                    <div>\r\n                        <img src={dialog.photos.small || defaultAvatar} alt=\"avatar\"/>\r\n                    </div>\r\n                    <div className={style.content}>\r\n                        <span className={style.name}>{dialog.userName}</span>\r\n                        <span>{dateFormatter(dialog.lastDialogActivityDate)}</span>\r\n                        <p>Online {dateFormatter(dialog.lastUserActivityDate)}</p>\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n};\r\nexport default Dialog;","import React, {FC} from 'react';\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport style from './DialogsItems.module.css'\r\n\r\ntype PropsType = {\r\n    dialogs: Array<any>\r\n}\r\n\r\nconst DialogsItems: FC<PropsType> = (props) => {\r\n    let dialogElemnts = props.dialogs\r\n        .map(dialog => {\r\n            console.log(dialog);\r\n            return <Dialog key={dialog.id} dialog={dialog}/>\r\n        });\r\n\r\n    return (\r\n        <div className={style.items}>\r\n            {dialogElemnts}\r\n        </div>\r\n    );\r\n};\r\nexport default DialogsItems;","import React, {FC} from 'react';\r\nimport style from './MyMessages.module.css';\r\nimport defaultAvatar from '../../../../assets/images/user.png';\r\n\r\ntype PropsType = {\r\n    message: any\r\n    avatar: string | null\r\n    login: string | null\r\n}\r\n\r\nconst MyMessages: FC<PropsType> = ({message, avatar, login}) => {\r\n    return (\r\n        <div className={style.message}>\r\n            <div className={style.content}>\r\n                <div className={style.info}>\r\n                    <span className={style.name}>{login}</span>\r\n                    <span className={style.date}>{message.date}</span>\r\n                </div>\r\n                <p>{message.message}</p>\r\n            </div>\r\n            <img className={style.avatar} src={avatar || defaultAvatar} alt=\"avatar\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyMessages;","import React, {FC} from 'react';\r\nimport style from './YourMessages.module.css'\r\n\r\ntype PropsType = {\r\n    message: any\r\n}\r\n\r\nconst YourMessages: FC<PropsType> = ({message}) => {\r\n  return(\r\n      <div className={style.message}>\r\n          <img className={style.avatar} src=\"https://img.novosti-n.org/upload/ukraine/131388.jpg\" alt=\"avatar\"/>\r\n          <div className={style.content}>\r\n             <div className={style.info}>\r\n                 <span className={style.name}>{message.name}</span>\r\n                 <span className={style.date}>{message.date}</span>\r\n             </div>\r\n              <p>{message.message}</p>\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\nexport default YourMessages;","import React, {FC} from 'react';\r\nimport style from './Input.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLength} from \"../../../../utils/validators\";\r\nimport defaultAvatar from '../../../../assets/images/user.png';\r\n\r\nlet maxLength50 = maxLength(50);\r\n\r\ntype PropsType = {\r\n    userId: number | null\r\n    avatar: string | null\r\n    login: string | null\r\n    addMessage: (messageText: string, userId: number, login: string) => void\r\n}\r\nconst Input: FC<PropsType> = ({addMessage, userId, avatar, login}) => {\r\n\r\n    let onAddMessage = (formData: FormData) => {\r\n        if (userId && login) {\r\n            addMessage(formData.messageText, userId, login);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={style.input}>\r\n            <img src={avatar || defaultAvatar} alt=\"avatar\"/>\r\n            <MessageReduxForm onSubmit={onAddMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormData = {\r\n    messageText: string\r\n}\r\n\r\nconst MessageForm: FC<InjectedFormProps<FormData>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field customClassName={'top'} component={Textarea} validate={[maxLength50]}\r\n                   placeholder='Type your message...' name='messageText'/>\r\n            <button>Send</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nlet MessageReduxForm = reduxForm<FormData>({form: 'message'})(MessageForm);\r\n\r\nexport default Input;","import React, {FC} from 'react';\r\nimport MyMessages from \"./MyMessages/MyMessages\";\r\nimport style from './Messages.module.css'\r\nimport YourMessages from \"./YourMessages/YourMessages\";\r\nimport Input from \"./Input/Input\";\r\n\r\ntype PropsType = {\r\n    messages: Array<any>\r\n    avatar: string | null\r\n    userId: number | null\r\n    login: string | null\r\n    addMessage: (messageText: string, userId: number, login: string) => void\r\n}\r\n\r\nconst Messages: FC<PropsType> = ({messages,avatar, addMessage, userId, login}) => {\r\n\r\n\r\nlet messageElements = messages\r\n    .map(message => {\r\n        if (message.userId == userId) {\r\n            return <MyMessages key={message.id} message={message}\r\n                               avatar={avatar} login={login}/>\r\n        } else {\r\n            return <YourMessages key={message.id} message={message} />\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={style.messages}>\r\n                {messages.length ? messageElements : <h1>Send first message</h1>}\r\n            </div>\r\n            <Input login={login} avatar={avatar} userId={userId} addMessage={addMessage}/>\r\n        </div>\r\n    );\r\n}\r\n    ;\r\n    export default Messages;","import React, {FC} from 'react';\r\nimport style from './Dialogs.module.css';\r\nimport DialogsItems from \"./DialogsItems/DialogsItems\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport Search from \"../common/Search/Search\";\r\n\r\ntype PropsType = {\r\n    messages: Array<any>\r\n    dialogs: Array<any>\r\n    avatar: string | null\r\n    login: string | null\r\n    userId: number | null\r\n    addMessage: (messageText: string, userId: number, login: string) => void\r\n}\r\n\r\nconst Dialogs: FC<PropsType> = ({dialogs, ...props}) => {\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <Search placeholder='Search dialog'/>\r\n            <div className={style.container}>\r\n                <DialogsItems dialogs={dialogs}/>\r\n                <Messages messages={props.messages} addMessage={props.addMessage} avatar={props.avatar}\r\n                          login={props.login} userId={props.userId}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessage, getDialogs, getMessages} from \"../../Redux/dialogReducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {toggleIsSuccess} from \"../../Redux/appReducer\";\r\nimport {Redirect, withRouter, RouteComponentProps} from \"react-router-dom\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {AppStateType} from \"../../Redux/reduxStore\";\r\n\r\ntype MapStateToPropsType = {\r\n    messages: Array<any>\r\n    dialogs: Array<any>\r\n    avatar: string | null\r\n    login: string | null\r\n    userId: number | null\r\n    isFetching: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (messageText: string, userId: number, login: string) => void\r\n    getMessages: (userId: number) => void\r\n    toggleIsSuccess: (isSuccess: boolean) => void\r\n    getDialogs: () => void\r\n}\r\n\r\ntype ParamsType = {\r\n    userId?: string\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchPropsType & RouteComponentProps<ParamsType>;\r\n\r\nclass DialogsContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.toggleIsSuccess(false);\r\n        this.props.getDialogs();\r\n\r\n        if (this.props.match.params.userId) {\r\n            this.props.getMessages(+this.props.match.params.userId);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {userId, login, avatar, addMessage, dialogs, messages} = this.props;\r\n\r\n        if (!this.props.match.params.userId && this.props.dialogs.length) {\r\n            return <Redirect to={`/messages/${this.props.dialogs[0].id}`}/>\r\n        }\r\n\r\n        if (this.props.isFetching) return <Preloader/>;\r\n        return (\r\n            <Dialogs userId={userId} login={login} avatar={avatar} addMessage={addMessage}\r\n                     dialogs={dialogs} messages={messages}/>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        messages: state.dialogs.messages,\r\n        dialogs: state.dialogs.dialogs,\r\n        avatar: state.auth.photos.small,\r\n        login: state.auth.login,\r\n        userId: state.auth.userId,\r\n        isFetching: state.app.isFetching\r\n    };\r\n};\r\n\r\nexport default compose(connect<MapStateToPropsType, MapDispatchPropsType, unknown, AppStateType>(mapStateToProps,\r\n    {addMessage, getMessages, toggleIsSuccess, getDialogs}),\r\n    withAuthRedirect, withRouter)(DialogsContainer);"],"sourceRoot":""}